%YAML 1.2
---

# James Corcoran 2021
# https://github.com/jorks/sublime-jamflog

# Development Tips
#
#   See http://www.sublimetext.com/docs/3/syntax.html
#   macOS Keyboard shortcut to show scope Ctl + Shift + P

#### Syntax Definition ####

file_extensions:
  - log

first_line_match: '^\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3}\s\['

# Default Scope
scope: text.jamflog

contexts:
  # The main context is the initial starting point of our syntax
  main:
    # Include other contexts - the order is important
    - include: timestamp
    - include: helpfuls
    - include: function
    - include: thread
    - include: severity
    - include: exception
    - include: stack
    - include: inlinexml


# New line starting with a timestamp
  timestamp:
    # Newline with date formatted based on digit counts
    # 10.31 - added a . as some timestamps have a random T
    - match: '^(\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3})'
      scope: constant.numeric.jamflog timestamp.jamflog


# Helpfuls let me highlight message content
  helpfuls:
    # Messages in the log string that should be highlighted
    - match: 'Jamf Pro Version:'
      scope: invalid.deprecated.jamflog startstop.thread.jamflog
    - match: 'Turning debug mode on\.'
      scope: invalid.deprecated.jamflog startstop.thread.jamflog
    - match: 'Turning debug mode off\.'
      scope: invalid.deprecated.jamflog startstop.thread.jamflog
    - match: 'JAMF JSS DataSource Connection Pool'
      scope: invalid.deprecated.jamflog startstop.thread.jamflog


# Function brackets
  function:
    # Matched but unused
    - match: '\[.{25}\]'
      scope: entity.name.label.jamflog unused.function.jamflog


# Thread brackets
  thread:
    # Match StartStops
    - match: '(\[)(startStop\-\d)(\])'
      captures:
        1: punctuation.definition.tag.begin.jamflog peripheral.thread.jamflog
        2: invalid.deprecated.jamflog startstop.thread.jamflog
        3: punctuation.definition.tag.end.jamflog peripheral.thread.jamflog
    - match: '(\[)(.{11})(\])'
      captures:
        1: punctuation.definition.tag.begin.jamflog boaring.thread.jamflog
        2: boaring.thread.jamflog
        3: punctuation.definition.tag.begin.jamflog boaring.thread.jamflog


# Log Message Severity
  severity:
    - match: '\['
      scope: punctuation.definition.tag.begin.jamflog peripheral.jamflog
    - match: 'DEBUG'
      scope: markup.inserted.jamflog markup.info.jamflog debug.loglevel.jamflog
    - match: 'INFO\s'
      scope: markup.inserted.jamflog markup.info.jamflog info.loglevel.jamflog
    - match: 'WARN\s'
      scope: markup.changed.jamflog markup.warning.jamflog warn.loglevel.jamflog
    - match: 'ERROR'
      scope: markup.deleted.jamflog markup.error.jamflog error.loglevel.jamflog
    - match: 'FATAL'
      scope: invalid.illegal.jamflog fatal.loglevel.jamflog
    - match: '\]'
      scope: punctuation.definition.tag.end.jamflog peripheral.jamflog


# Java Exceptions
  exception:
    # This section could be improved
    - match: '^([a-zA-Z\s]*)(.*Exception\:)(\s*.*)$'
      captures:
        1: markup.deleted.jamflog markup.error.jamflog control.jamflog
        2: markup.deleted.jamflog entity.exception.jamflog
        3: entity.exception.message.jamflog


# Stack Traces
  stack:
    # =< 10.30 it was '^(\s*)(at )(.*)(\(.*\))$'
    # => 10.31 is is now: '^(\s*)(at )(.*)(\(.*\)).?.?+?(\[.*\])?$'
    - match: '^(\s*)(at )(.*)(\(.*\)).?.?+?(\[.*\])?$'
      captures:
        1: text.jamflog
        2: keyword.control.import.jamflog entity.warn.jamflog
        3: support.function.jamflog entity.warn.message.jamflog
        4: string.quoted.single.jamflog control.jamflog
        5: support.class.jamflog library.jamflog
    - match: '\.\.\.\s[0-9]+\smore'
      scope: control.jamflog


# Push the builtin XML syntax
  inlinexml:
    - match: '(<\?xml)\s((.|\n)*)'
      push: Packages/XML/XML.sublime-syntax
      with_prototype:
        # Pop with the typical end plist tag
        - match: '(?<=</plist>)'
          pop: true
        # Pop at the next timestamped line if the XML is not closed correctly
        - match: '^(\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3})'
          scope: constant.numeric.jamflog   timestamp.jamflog
          pop: true


