%YAML 1.2
---
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Copyright 2021 Jamf

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
                                                                                          #
                                                                                          #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  ~ James Corcoran 2021 ~ https://jorks.net ~
#
#   ▄▄▄██▀▀▀▒█████   ██▀███   ██ ▄█▀  ██████
#     ▒██  ▒██▒  ██▒▓██ ▒ ██▒ ██▄█▒ ▒██    ▒
#     ░██  ▒██░  ██▒▓██ ░▄█ ▒▓███▄░ ░ ▓██▄
#  ▓██▄██▓ ▒██   ██░▒██▀▀█▄  ▓██ █▄   ▒   ██▒
#   ▓███▒  ░ ████▓▒░░██▓ ▒██▒▒██▒ █▄▒██████▒▒
#   ▒▓▒▒░  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░
#   ▒ ░▒░    ░ ▒ ▒░   ░▒ ░ ▒░░ ░▒ ▒░░ ░▒  ░ ░
#   ░ ░ ░  ░ ░ ░ ▒    ░░   ░ ░ ░░ ░ ░  ░  ░
#   ░   ░      ░ ░     ░     ░  ░         ░
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
                                                                                          #
                                                                                          #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Hot tips for navigating logs
#
#   Use the Command Palette Cmd + Shift + P
#   Fold or Unfold All to hide all stack traces

# Development Tips
#
#   See http://www.sublimetext.com/docs/3/syntax.html
#   macOS Keyboard shortcut to show scope Ctl + Shift + P

# Changelog
#
#   04/08/2021: Jamf Pro 10.31 introduced a new log format
#    - Updated the timestamp regex (replaced known space with '.')
#    - Updated the stack regex for new brackets while remaining backwards compatible
#    - Fixed pushing XML to default package - yay!

# To Do
#
#   Detect Jamf log files better, I think I can do this with first line logic
#   Create some custom actions



#### Syntax Definition ####

# This can interfere with other log files - tough luck
file_extensions:
  - log

first_line_match: '^\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3}\s\['

# Default Scope
scope: text.jamflog

contexts:
  # The main context is the initial starting point of our syntax
  main:
    # Include other contexts - the order is important
    - include: timestamp
    - include: helpfuls
    - include: function
    - include: thread
    - include: severity
    - include: exception
    - include: stack
    - include: inlinexml


# New line starting with a timestamp
  timestamp:
    # Newline with date formatted based on digit counts
    # 10.31 - added a . as some timestamps have a random T
    - match: '^(\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3})'
      scope: timestamp.jamflog


# Helpfuls let me highlight message content
  helpfuls:
    # Messages in the log string that should be highlighted
    - match: 'Jamf Pro Version:'
      scope: startstop.thread.jamflog
    - match: 'Turning debug mode on\.'
      scope: startstop.thread.jamflog
    - match: 'Turning debug mode off\.'
      scope: startstop.thread.jamflog
    - match: 'JAMF JSS DataSource Connection Pool'
      scope: startstop.thread.jamflog


# Function brackets
  function:
    # Matched but unused
    - match: '\[.{25}\]'
      scope: unused.function.jamflog


# Thread brackets
  thread:
    # Match StartStops
    - match: '(\[)(startStop\-\d)(\])'
      captures:
        1: peripheral.thread.jamflog
        2: startstop.thread.jamflog
        3: peripheral.thread.jamflog
    - match: '\[.{11}\]'
      scope: boaring.thread.jamflog


# Log Message Severity
  severity:
    - match: '\['
      scope: peripheral.jamflog
    - match: 'DEBUG'
      scope: debug.loglevel.jamflog
    - match: 'INFO\s'
      scope: info.loglevel.jamflog
    - match: 'WARN\s'
      scope: warn.loglevel.jamflog
    - match: 'ERROR'
      scope: error.loglevel.jamflog
    - match: 'FATAL'
      scope: fatal.loglevel.jamflog
    - match: '\]'
      scope: peripheral.jamflog


# Java Exceptions
  exception:
    # This section could be improved
    - match: '^([a-zA-Z\s]*)(.*Exception\:)(\s*.*)$'
      captures:
        1: control.jamflog
        2: entity.exception.jamflog
        3: entity.exception.message.jamflog


# Stack Traces
  stack:
    # =< 10.30 it was '^(\s*)(at )(.*)(\(.*\))$'
    # => 10.31 is is now: '^(\s*)(at )(.*)(\(.*\)).?.?+?(\[.*\])?$'
    - match: '^(\s*)(at )(.*)(\(.*\)).?.?+?(\[.*\])?$'
      captures:
        1: control.jamflog
        2: entity.warn.jamflog
        3: entity.warn.message.jamflog
        4: control.jamflog
        5: library.jamflog
    - match: '\.\.\.\s[0-9]+\smore'
      scope: control.jamflog


# Push the builtin XML syntax
  inlinexml:
    - match: '(<\?xml)\s((.|\n)*)'
      push: Packages/XML/XML.sublime-syntax
      with_prototype:
        # Pop with the typical end plist tag
        - match: '(?<=</plist>)'
          pop: true
        # Pop at the next timestamped line if the XML is not closed correctly
        - match: '^(\d{4}\-\d{2}\-\d{2}.\d{2}\:\d{2}\:\d{2}\,\d{3})'
          scope: timestamp.jamflog
          pop: true


